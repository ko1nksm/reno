#!/usr/bin/env bash

. bootstrap

project=$(reno-properties PROJECT)

stdout=""
for option in "$@"; do
  case $option in
    --stdout) shift; stdout=1 ;;
    *) break
  esac
done

generate() {
  local file=$1
  local data=$2

  if [[ $stdout ]];then
    puts "$data"
    return 0
  fi

  if [[ -e $file ]]; then
    reno-yesno "Already exists file. Overwrite it? [$file] " || return 1
  fi

  run mkfile "$file" "$data"
  info "$file generated."
}

generate_gitignore() {
  generate "$INFILL_DIR/.gitignore" "$(cat <<DATA
# Do not recommend the management of secret files.
id_rsa
id_dsa
id_ecdsa
identity
*.ppk
DATA
  )"
}

generate_readme() {
  generate "$INFILL_DIR/README.md" "$(cat <<DATA
This is an infill directory of the reno a home directory management tool.

Infill directory might be contained personal data.

Please be careful when you fork.

If you are interested in the reno, please refer to $project
DATA
  )"
}

generate_setup() {
  local reno_repo=$(reno-properties REPOSITORY)
  local infill_repo="YOUR-INFILL-REPOSITORY"
  local infill_archive="YOUR-INFILL-ARCHIVE"
  local installer=$(reno-properties INSTALLER)

  if ! exists git; then
    warn "infill repository not detected. [git not found]"
  elif [[ ! -e "$INFILL_DIR" ]]; then
    warn "infill repository not detected. [infill directory '$INFILL_DIR' not found]"
  else
    infill_repo=$(git -C "$INFILL_DIR" config --get remote.origin.url)
  fi

  generate "$INFILL_DIR/setup.sh" "$(cat <<DATA
#!/usr/bin/env bash

set -eu

INSTALL_DIR="\$HOME/.reno"
AUTO_INSTALL=
AUTO_YES=

# install via git
REPOSITORY="$reno_repo"
INFILL_REPOSITORY="$infill_repo"

# install from archive
INSTALLER="$installer"
INFILL_ARCHIVE="$infill_archive"
INFILL_ARCHIVE_FORMAT="auto"
DATA
cat <<'DATA'

export RENO_YES=${AUTO_YES:-}

if type git > /dev/null 2>&1; then
  if [[ -e $INSTALL_DIR || -L $INSTALL_DIR ]]; then
    echo "Found reno directory. skipping reno installation."
  else
    git clone "$REPOSITORY" "$INSTALL_DIR"
    "$INSTALL_DIR/install.sh"
  fi

  if [[ $INFILL_REPOSITORY && $INFILL_REPOSITORY != "YOUR-INFILL-REPOSITORY" ]]; then
    "$INSTALL_DIR/bin/reno" init "$INFILL_REPOSITORY"
  fi
else
  if [[ ! $INSTALLER ]]; then
    echo "Git not found."
    exit 1
  fi

  if [[ $AUTO_YES ]]; then
    echo "Git not found. Import from archive."
  else
    echo -n "Git not found. Do you want to import from an archive? [y/N] "
    read input
  fi
  [[ $input = "y" || $input = "Y" ]] || exit 1

  if type curl > /dev/null 2>&1; then
    bash -c "$(curl -L $INSTALLER)"
  elif type wget > /dev/null 2>&1; then
    bash -c "$(wget -O - $INSTALLER)"
  else
    echo "Not found git, wget, curl. Aborting"
    exit 1
  fi

  if [[ $INFILL_ARCHIVE && $INFILL_ARCHIVE != "YOUR-INFILL-ARCHIVE" ]]; then
    "$INSTALL_DIR/bin/reno" init "$INFILL_ARCHIVE" --type archive --format "$INFILL_ARCHIVE_FORMAT"
  fi
fi

if [[ $AUTO_INSTALL ]]; then
  "$INSTALL_DIR/bin/reno" install
fi
DATA
  )"

  chmod +x "$INFILL_DIR/setup.sh"
}

func="generate_${1:-}"

exists "$func" || abort "Unknown generator name '$1'"

$func
